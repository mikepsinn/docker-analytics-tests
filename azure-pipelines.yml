# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- master

resources:
  containers:
#  - container: redis
#    image: redis
#    ports:
#    - 6379:6379
  - container: mongo
    image: mongo
    ports:
    - 27017:27017
#  - container: postgres
#    image: postgres
#    ports:
#    - 5432:5432
#    env:
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: test

pool:
  vmImage: 'ubuntu-latest'

variables:
  phpVersion: 7.2
  #DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  #MYSQL_DATABASE: test
  #RedisConnectionString: localhost:6379
  MongoDbConnectionString: mongodb://localhost:27017/test
  #MySQLConnectionString: server=localhost;uid=root;pwd=root;database=test;Allow User Variables=true
  #PostgreSqlConnectionString: Server=localhost;Port=5432;Database=test;User Id=postgres;Password=postgres;
  #SQLServerConnectionString: Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=tempdb;Trusted_Connection=True;
  system.debug: true
  TRAVIS_COMMIT_MESSAGE: $(Build.SourceVersionMessage)

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
    sudo apt-get install -y build-essential debconf-utils screen mysql-server 
    #sudo apt-get install -y nodejs google-chrome-stable
    sudo apt-get install -y unzip xvfb autogen autoconf libtool pkg-config nasm
    sudo mysql -uroot -proot -e "use mysql; update user set authentication_string=PASSWORD('test_password') where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;"
    sudo mysql -u root -ptest_password -e 'create database quantimodo_test;'
  displayName: 'Installing System Dependencies'

- script: |
    mysql --version
  displayName: 'MySQL Version'

- script: |
    export TRAVIS_BUILD_DIR=$PWD
    sudo apt-get update
    sudo apt-get -y install pandoc
    chmod +x ./*.sh
  displayName: 'Installing pandoc'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    export TRAVIS_BUILD_DIR=$PWD
    ./clone.sh
    chmod +x ./qm-api/tests/travis/*.sh
    ./qm-api/tests/travis/mark_pending_on_github.sh
    pecl channel-update pecl.php.net
    pecl -q install mongodb || true
    echo "extension=mongodb.so" >> `php --ini | grep "Loaded Configuration" | sed -e "s|.*:\s*||"`
    echo "extension = memcached.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
    ./qm-api/tests/travis/tideways.sh
    ./qm-api/tests/travis/xhgui.sh
    ./qm-api/tests/travis/composer.sh
  displayName: 'Cloning qm-api and Installing Package Dependencies'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    export TRAVIS_BUILD_DIR=$PWD
    ./qm-api/tests/travis/phpunit.sh
  displayName: 'Running Unit Tests'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    export TRAVIS_BUILD_DIR=$PWD
    ./qm-api/tests/travis/mark_failed_on_github.sh
  displayName:  'Failure Status'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    export TRAVIS_BUILD_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    ./qm-api/tests/travis/mark_succeeded_on_github.sh
  displayName:  'Success Status'
  env:
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)

- script: |
    echo "TODO: Implement browser tests"
    #sudo npm i -g npm
    #sudo chown -R vsts:vsts ~/.npm
    #sudo chown -R vsts:vsts ~/.config
    #npm install
    #npm run prod
    #node -v
  displayName: 'Generating build assets'

- script: |
    echo "TODO: Implement browser tests"
    #screen -d -m google-chrome-stable --headless --disable-gpu --disable-dev-shm-usage --disable-software-rasterizer --remote-debugging-port=9222 http://localhost &
    #screen -d -m php artisan serve &
  displayName: 'Starting Chrome and the Web Server'

- script: |
    echo "TODO: Implement browser tests"
    #php artisan dusk --log-junit tests/Results/TEST-dusk-junit.xml
  displayName: 'Running Browser Tests'

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2.210.0
  inputs:
    testRunner: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: '**/TEST-*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/tests/Results' # Optional
    mergeTestResults: false # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    #publishRunAttachments: true # Optional
  condition: always()